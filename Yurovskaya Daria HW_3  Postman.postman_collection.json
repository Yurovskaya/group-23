{
	"info": {
		"_postman_id": "aa84a2fa-da1c-40d7-b842-45d9e1896fd9",
		"name": "HW_3  Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var resp_data = pm.response.json();\r",
							"pm.environment.set(\"token\", resp_data.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"login\": \"dog\",\r\n\t\"password\": \"kopkpk\"\r\n}"
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//var resp_data = pm.response.json();\r",
							"\r",
							"\r",
							"//Проверка структуры json в ответе.\r",
							"const schema = {\r",
							"\"type\": \"object\",\r",
							"\"properties\": {\r",
							" \"person\": {\r",
							" \"type\": \"object\",\r",
							"\"properties\": {\r",
							" \"u_age\": {\r",
							" \"type\": \"integer\"\r",
							" },\r",
							"\"u_name\": {\r",
							" \"type\": \"array\",\r",
							"\"items\": [\r",
							" {\r",
							" \"type\": \"string\"\r",
							" },\r",
							"{\r",
							"\"type\": \"integer\"\r",
							" },\r",
							"{\r",
							"\"type\": \"integer\"\r",
							" }\r",
							" ]\r",
							"},\r",
							"\"u_salary_1_5_year\": {\r",
							" \"type\": \"integer\"\r",
							" }\r",
							" },\r",
							"\"required\": [\r",
							" \"u_age\",\r",
							"\"u_name\",\r",
							"\"u_salary_1_5_year\"\r",
							" ]\r",
							" },\r",
							"\"qa_salary_after_12_months\": {\r",
							" \"type\": \"number\"\r",
							" },\r",
							"\"qa_salary_after_6_months\": {\r",
							" \"type\": \"integer\"\r",
							" },\r",
							" \"start_qa_salary\": {\r",
							" \"type\": \"integer\"\r",
							" }\r",
							" },\r",
							"\"required\": [\r",
							" \"person\",\r",
							"\"qa_salary_after_12_months\",\r",
							"\"qa_salary_after_6_months\",\r",
							"\"start_qa_salary\"\r",
							" ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validate schema\", () =>{\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var resp_data = pm.response.json();\r",
							"var req_data = request.data;\r",
							"var test = request.data;\r",
							"\r",
							" pm.test(\"Your test u_salary_1_5_year \", function () {\r",
							"    pm.expect(+resp_data.u_salary_1_5_year).to.eql(test.salary*4)\r",
							" });\r",
							"\r",
							" pm.test(\"Your test qa_salary_after_12_months \", function () {\r",
							"    pm.expect(+resp_data.person.qa_salary_after_12_months).to.eql(test.salary*2.9)\r",
							" });\r",
							"\r",
							"pm.test(\"Your test qa_salary_after_6_months\", function () {\r",
							"    pm.expect(+resp_data.person.qa_salary_after_6_months).to.eql(test.salary*2)\r",
							" });\r",
							"pm.test(\"Your test start_qa_salary\", function () {\r",
							"    pm.expect(+resp_data.person.start_qa_salary).to.eql(test.salary*1)\r",
							" });\r",
							"\r",
							"console.log(resp_data );\r",
							"\r",
							"// Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"\r",
							"var resp_data = pm.response.json();\r",
							"var req_data = request.data;\r",
							"\r",
							"pm.environment.set(\"u_salary_1.5_year\", resp_data.person.u_salary_1_5_year);var onw = {\r",
							"    url: \"http://162.55.220.72:5005/get_test_user\",\r",
							"    method: \"POST\",\r",
							"    body: {\r",
							"        mode: \"formdata\", \r",
							"        formdata:[\r",
							"        {key: \"auth_token\", value: pm.environment.get(\"token\"), disabled: false},\r",
							"        {key: \"name\", value: pm.environment.get(\"name\"), disabled: false},\r",
							"        {key: \"age\", value: pm.environment.get(\"age\"), disabled: false},\r",
							"        {key: \"salary\", value: pm.environment.get(\"u_salary_1.5_year\"), disabled: false}]} \r",
							"}\r",
							"\r",
							"pm.sendRequest(onw, function(err, resp){\r",
							"    console.log(err)\r",
							"    console.log(resp)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"age\": \"{{age}}\",\r\n\t\"name\": \"{{name}}\",\r\n\t\"salary\": \"{{salary}}\",\r\n\t\"auth_token\":\"{{token}}\"\r\n}\r\n\t",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//Проверка структуры json в ответе\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"required\": [],\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\" : {\r",
							"        \"type\" : \"array\"},\r",
							"        \"properties\" : {\r",
							"         \"salary\" : {\"type\" : \"integer\"},\r",
							"         \"salary*2\" : {\"type\" : \"string\"},\r",
							"         \"salary*3\" : {\"type\" : \"string\"},   \r",
							"         }\r",
							"        }\r",
							"    };\r",
							"  \r",
							"pm.test(\"Validate schema\", () =>{\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"\r",
							"var salary_body = JSON.parse(responseBody);\r",
							"    var salary_1 = salary_body.salary[0]*2;\r",
							"    var salary_2 = salary_body.salary[0]*3;\r",
							"        pm.test(\"Salary ratio \", function () {\r",
							"        var salary_body = pm.response.json();\r",
							"        pm.expect(+(salary_body.salary[1])).to.eql(salary_1);\r",
							"        pm.expect(+(salary_body.salary[2])).to.eql(salary_2);\r",
							"    });\r",
							"\r",
							"\r",
							"// Проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"Array_value_check\", function () {\r",
							"        var salary_body = pm.response.json();\r",
							"        pm.expect(+(salary_body.salary[2]))>(salary_body.salary[0]);\r",
							"        pm.expect(+(salary_body.salary[2]))>(salary_body.salary[1]);\r",
							"    });\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Проверка структуры json в ответе.\r",
							"const schema = {\r",
							"     \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validate schema\", () =>{\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3. Проверить что занчение поля name = значению переменной name из окружения?\r",
							"\r",
							"var resp_data = pm.response.json();\r",
							"pm.environment.set(\"name\", resp_data.name)\r",
							"console.log(pm.environment.get('name'));\r",
							"\r",
							"pm.test (\"environment name\", function () {\r",
							"  pm.expect(resp_data.name).to.eql(pm.environment.get(\"name\"))\r",
							"   });\r",
							"\r",
							"//4. Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"   pm.test (\"age\", function () {\r",
							"  pm.expect(resp_data.age).to.eql(resp_data.age)\r",
							"   });\r",
							"\r",
							"\r",
							"   "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// 2.Проверка структуры json в ответе/\r",
							"const schema = {\r",
							"\"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"  pm.test(\"Validate schema\", () =>{\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"var resp_data = pm.response.json();\r",
							"var req_data = request.data;\r",
							"pm.environment.set(\"weight\", req_data.weight);\r",
							"\r",
							"// 3. В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"\r",
							"var daily_food = (req_data.weight*0.012);\r",
							"var daily_sleep = (req_data.weight*2.5);\r",
							"\r",
							"\r",
							"pm.test(\"Food/sleep Check\", function () {\r",
							"        pm.expect(daily_food).to.eql(resp_data.daily_food);\r",
							"        pm.expect(daily_sleep).to.eql(resp_data.daily_sleep);\r",
							"        });\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "{{weight}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"\r",
							"\r",
							"var resp_data = pm.response.json();\r",
							"var req_data = request.data;\r",
							"\r",
							"console.log(resp_data);\r",
							"\r",
							"var list = (resp_data.length);\r",
							" console.log(list);\r",
							"\r",
							"function getRandomInt(list) {\r",
							"  return Math.floor(Math.random() * list);\r",
							"}\r",
							"\r",
							"var random_int = getRandomInt(list);\r",
							"\r",
							"console.log (random_int);\r",
							"\r",
							"var res_item = resp_data [random_int];\r",
							"pm.environment.set(\"cur_code\", res_item.Cur_ID);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn 7",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "cur_code",
							"value": "{{cur_code}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}